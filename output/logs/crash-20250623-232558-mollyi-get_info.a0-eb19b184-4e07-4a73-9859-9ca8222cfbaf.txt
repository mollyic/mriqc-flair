Node: mriqc_wf.anatMRIQC.get_info
Working directory: /home/mollyi/Projects/EMRIqc/code/mriqc-flair/mriqc/work/mriqc_wf/anatMRIQC/dc529c678cf07f9c5780e64cea912da520ffc1c0/get_info

Node inputs:

function_str = def _get_info(in_file):
    from mriqc import config
    from templateflow.api import get as get_template
    from niworkflows.utils.misc import get_template_specs
    #from mriqc.workflows.anatomical.base import _get_mod
    from mriqc.workflows.anatomical.modules.wrap_normalisation import _get_custom_templates

    """
    Retrieve information for future processing, returns:
        * modality: file modality
        * bspline: bspline distance for INU correction
        * trans_mod: Adjusted modality as patial normalisation function does not accept 'FLAIR' convert to T2w
        * tpl_reference: path to MNI template
        * tpl_mask: path to MNI template brain mask 
        * wm_tpl: path to MNI template WM probseg 
        * tissue_tpls: path 

    """
    from mriqc.config import USR_DICT
    from pathlib import Path

    # 1. Get modality
    in_file = Path(in_file)
    extension = ''.join(in_file.suffixes)
    modality = in_file.name.replace(extension, '').split('_')[-1]

    # 2. Get template ID, bspline, trans_mod -----------------------------------------
    bspline = int(USR_DICT['inu_bspline'])
    tpl_id, trans_mod = (
        ('GG853', 'T2w') if modality == 'FLAIR' else (config.workflow.template_id, modality)
    )
    # tpl_id, bspline, trans_mod =('GG853', flair_bspline, 'T2w') if modality == 'FLAIR' else (config.workflow.template_id, 200, modality)


    # 3. Get MNI template
    #template_spec['suffix'] = template_spec.get('suffix', modality)
    # tpl_reference, common_spec = get_template_specs(
    #     tpl_id,
    #     template_spec=template_spec,
    #     fallback=True,
    # )

    if modality == 'FLAIR':
       tpl_reference =  _get_custom_templates()[0]
    else: 
        tpl_reference, common_spec = get_template_specs(
            tpl_id,
            template_spec={'res': 1, 'suffix': modality, 'desc' : None},
            default_resolution=1,
            fallback=True,
        )

    # 4. Get binary mask
    tpl_mask = str(
        get_template(tpl_id, resolution=2, desc='brain', suffix='mask')
    )

    # Check species and configure tpls accordingly
    tpl_reference, tpl_mask = (
        (tpl_reference, tpl_mask)
        if config.workflow.species.lower() == 'human'
        else (
            str(get_template(tpl_id, suffix='T2w')),
            str(get_template(tpl_id, desc='brain', suffix='mask')[0]),
        )
    )
    # 5. Get tissue templates
    tissue_tpls = [
        str(p)
        for p in get_template(
            tpl_id,
            suffix='probseg',
            resolution=(1 if config.workflow.species.lower() == 'human' else None),
            label=['CSF', 'GM', 'WM'],
        )
    ]

    # 6. WM template
    wm_tpl = next(tissue_tpl for tissue_tpl in tissue_tpls if 'label-WM' in tissue_tpl)

    print(f'\n\nModality: {modality}')
    print(f'    * in_file:                  {in_file}')
    print(f'    * tpl_id:                   {tpl_id}')
    print(f'    * trans_mod:                {trans_mod}')
    print(f'    * bspline:                  {bspline}')
    print(f'    * tpl_reference:          {tpl_reference}')
    #print(f'    * common_spec:              {common_spec}')
    print(f'    * tpl_mask:            {tpl_mask}')
    print(f'    * tissue_tpls:              {tissue_tpls}')
    print(f'    * wm_tpl:                   {wm_tpl}\n\n')
    return modality, trans_mod, bspline, tpl_reference, tpl_mask, wm_tpl, tissue_tpls

in_file = /home/mollyi/Projects/EMRIqc/RADIOL_niis/sub-101565/ses-01/anat/sub-101565_FLAIR.nii.gz

Traceback (most recent call last):
  File "/home/mollyi/Projects/EMRIqc/code/mriqc-flair/mriqc/mriqc/engine/plugin.py", line 64, in run_node
    result['result'] = node.run(updatehash=updatehash)
  File "/home/mollyi/Projects/.virtualenvs/emriqc_mriqc24-0-02/lib/python3.10/site-packages/nipype/pipeline/engine/nodes.py", line 525, in run
    result = self._run_interface(execute=True)
  File "/home/mollyi/Projects/.virtualenvs/emriqc_mriqc24-0-02/lib/python3.10/site-packages/nipype/pipeline/engine/nodes.py", line 643, in _run_interface
    return self._run_command(execute)
  File "/home/mollyi/Projects/.virtualenvs/emriqc_mriqc24-0-02/lib/python3.10/site-packages/nipype/pipeline/engine/nodes.py", line 769, in _run_command
    raise NodeExecutionError(msg)
nipype.pipeline.engine.nodes.NodeExecutionError: Exception raised while executing Node get_info.

Traceback:
	Traceback (most recent call last):
	  File "/home/mollyi/Projects/.virtualenvs/emriqc_mriqc24-0-02/lib/python3.10/site-packages/nipype/interfaces/base/core.py", line 401, in run
	    runtime = self._run_interface(runtime)
	  File "/home/mollyi/Projects/.virtualenvs/emriqc_mriqc24-0-02/lib/python3.10/site-packages/nipype/interfaces/utility/wrappers.py", line 139, in _run_interface
	    out = function_handle(**args)
	  File "<string>", line 44, in _get_info
	  File "/home/mollyi/Projects/EMRIqc/code/mriqc-flair/mriqc/mriqc/workflows/anatomical/modules/wrap_normalisation.py", line 178, in _get_custom_templates
	    return [dwnld_dict['ref_std'],
	KeyError: 'ref_std'

